[tool.poetry]
name = "blog"
version = "0.1.0"
description = ""
authors = ["HanaPoulpe <hana@hanapoulpe.org>"]
readme = "README.md"
packages = [
    {include="blog", from="src"},
    {include="scripts", from="src"}
]

[tool.mypy]
python_version = "3.12"
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
strict_optional = true
warn_redundant_casts = true
warn_unreachable = true
warn_incomplete_stub = true
warn_return_any = true
warn_unused_ignores = true
ignore_missing_imports = true
# Required until https://github.com/python/mypy/issues/15238
mypy_path = "src/"

[tool.django-stubs]
django_settings_module = "blog.settings"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "**/migrations/*.py"
]
include = ["pyproject.toml", "src/**/*.py", "scripts/**/*.py"]
line-length = 90
indent-width = 4
target-version = "py313"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Quotes
    "Q",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # Other rules
    "COM818",
    "RUF012",
    "RUF013",
    "RUF018",
    "RUF100",
    # Missing tz
    "DTZ001",
    "DTZ005",
]
ignore = [
    # `python -O` removes `assert`
    "B011",
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.importlinter]
root_package = "python_template"
include_external_packages = "True"

[[tool.importlinter.contracts]]
name = "Main package can't import tools"
type = "forbidden"
source_modules = [
    "python_template"
]
forbidden_modules = [
    "tests",
    "scripts",
]

[tool.poetry.scripts]
# Python tools
python-ruff = "scripts:ruff"
python-format = "scripts:ruff_format"
python-tests = "scripts:pytest"
python-all-tests = "scripts:all_tests"
python-test-suite = "scripts:test_suite"
python-coverage = "scripts:coverage"
python-type-check = "scripts:mypy"
python-check-imports = "scripts:import_linter"

# CI tools
ci-python-tests = "scripts:github_python_test"
ci-approval-bot = "scripts:github_approval_bot"
ci-frontend = "scripts:github_frontend_test"
ci-docker = "scripts:github_docker_test"

# Django
django-start = "scripts:django_runserver"
django-shell = "scripts:django_shell"
django-manage = "scripts:django_manage"
django-makemigrations = "scripts:django_makemigrations"
django-migrate = "scripts:django_migrate"
django-createsuperuser = "scripts:django_createsuperuser"
collectstatic = "scripts:django_collectstatic"

# Docker
docker-entrypoint-test = "scripts:docker_entrypoint_tests"

[tool.poetry.dependencies]
python = "^3.12"
termcolor = "^2.5.0"
wagtail = "^6.3"
pyyaml = "^6.0.1"
django = "^5.1.4"
django-configurations = "^2.5.1"
python-dotenv = "^1.0.1"
environs = "^11.2.1"
frozenlist = "^1.5.0"
frozendict = "^2.4.6"
faker = "^30.6.0"
django-health-check = "^3.18.3"
psycopg2-binary = "^2.9.10"
django-linear-migrations = "^2.15.0"
attrs = "^24.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
ruff = "^0.8.2"
mypy = "^1.12.1"
SQLite3-0611 = "^0.0.1"
coverage = "^7.6.8"
pytest-cov = "^6.0.0"
import-linter = "^2.1"
types-pyyaml = "^6.0.12.20240917"
commit-linter = "^1.0.3"
factory-boy = "^3.3.1"
wagtail-factories = "^4.2.1"
pytest-env = "^1.1.5"
pytest-django = "^4.9.0"
django-types = "^0.19.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
